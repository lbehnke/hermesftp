#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.1 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// com.apporiented.hermesftp.utils.IOUtilsTest
	c370 [label=<<table title="com.apporiented.hermesftp.utils.IOUtilsTest" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./IOUtilsTest.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> IOUtilsTest </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + IOUtilsTest() </td></tr>
<tr><td align="left" balign="left"> + testCloseGracefully() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//com.apporiented.hermesftp.utils.IOUtilsTest extends junit.framework.TestCase
	c377:p -> c370:p [dir=back,arrowtail=empty];
	// junit.framework.TestCase
	c377 [label=<<table title="junit.framework.TestCase" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/junit/framework/TestCase.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> TestCase </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TestCase() </td></tr>
<tr><td align="left" balign="left"> + TestCase(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + countTestCases() : int </td></tr>
<tr><td align="left" balign="left"> # createResult() : TestResult </td></tr>
<tr><td align="left" balign="left"> + run() : TestResult </td></tr>
<tr><td align="left" balign="left"> + run(arg0 : TestResult) </td></tr>
<tr><td align="left" balign="left"> + runBare() </td></tr>
<tr><td align="left" balign="left"> # runTest() </td></tr>
<tr><td align="left" balign="left"> + assertTrue(arg0 : String, arg1 : boolean) </td></tr>
<tr><td align="left" balign="left"> + assertTrue(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + assertFalse(arg0 : String, arg1 : boolean) </td></tr>
<tr><td align="left" balign="left"> + assertFalse(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + fail(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + fail() </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : Object, arg2 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : Object, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : String, arg2 : String) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : double, arg2 : double, arg3 : double) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : double, arg1 : double, arg2 : double) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : float, arg2 : float, arg3 : float) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : float, arg1 : float, arg2 : float) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : long, arg2 : long) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : long, arg1 : long) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : boolean, arg2 : boolean) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : boolean, arg1 : boolean) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : byte, arg2 : byte) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : byte, arg1 : byte) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : char, arg2 : char) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : char, arg1 : char) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : short, arg2 : short) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : short, arg1 : short) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : String, arg1 : int, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + assertEquals(arg0 : int, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + assertNotNull(arg0 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertNotNull(arg0 : String, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertNull(arg0 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertNull(arg0 : String, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertSame(arg0 : String, arg1 : Object, arg2 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertSame(arg0 : Object, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertNotSame(arg0 : String, arg1 : Object, arg2 : Object) </td></tr>
<tr><td align="left" balign="left"> + assertNotSame(arg0 : Object, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + failSame(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + failNotSame(arg0 : String, arg1 : Object, arg2 : Object) </td></tr>
<tr><td align="left" balign="left"> + failNotEquals(arg0 : String, arg1 : Object, arg2 : Object) </td></tr>
<tr><td align="left" balign="left"> + format(arg0 : String, arg1 : Object, arg2 : Object) : String </td></tr>
<tr><td align="left" balign="left"> # setUp() </td></tr>
<tr><td align="left" balign="left"> # tearDown() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(arg0 : String) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

