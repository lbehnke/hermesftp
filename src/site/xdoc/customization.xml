<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Hermes FTP Server Project</title>
		<author email="nospam.AT.larsbehnke.DOT.net">Lars Behnke</author>
	</properties>
	<meta
		name="keyword"
		content="ftp, java" />
	<body>
		<section name="Extending the Hermes FTP Server">
			<p>Its IoC based architecture allows for extending or customizing the Hermes FTP Server easily. 
			Moreover, if you need to embed the ftp server in your own application you certainly can do so.
			The following paragraphs describe both of the scenarios.</p>
		<subsection name="Customizing the FTP Server">
		In this example we extend the ftp server by an SITE command returning server specific information
		to the caller.
        <p>Open the application context <i>hermesftp-ctx.xml</i> and find the <i>parser</i> bean.
        Now add the highlighted line to the list of properties:
        </p>
<source>
    &lt;bean id="parser" singleton="true" 
             class="net.sf.hermesftp.parser.impl.FtpCmdParserImpl"&gt;
		&lt;property name="commands"&gt;
			&lt;map&gt;
				...
				&lt;entry key="SITE" value="cmdSite" /&gt;
				...
			&lt;/map&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
</source>
        <p>Add a new bean to the application context and name it <i>cmdSite</i>.</p>
<source>
   	&lt;bean id="cmdSite" class="example.FtpCmdSite" singleton="false" /&gt;
</source>        
<p>Now open your IDE (if not already done) and extend the class <i>net.sf.hermesftp.cmd.AbstractFtpCmd</i>
as outlined in the snippet below.
</p>
<source>

package example;

import net.sf.hermesftp.cmd.AbstractFtpCmd;
import net.sf.hermesftp.exception.FtpCmdException;

public class FtpCmdSite
    extends AbstractFtpCmd {

    /**
     * {@inheritDoc}
     */
    public void execute() throws FtpCmdException {

        // handle command

        if (ok) {
          msgOut(MSG200_NOTED);
        } else {
          msgOut(MSG500;
        }
        
    }

    /**
     * {@inheritDoc}
     */
    public String getHelp() {
        return "My custom site command.";
    }

    /**
     * {@inheritDoc}
     */
    public boolean isAuthenticationRequired() {
        return true;
    }


</source>
        
<p>
  After wrapping the compiled class into a JAR file you must copy the archive into the folder 
  <i>$HERMES_HOME/plugins</i>. All classes found in this folder are loaded automatically after starting up the application.
  In the same way all parts of Hermes FTP Server represented by a Spring bean can be replaced or modified.   
</p>        
        
        </subsection>
		<subsection name="Embedding the FTP Server">
		
		The snippet below demonstrates how to fire up Hermes FTP Server from within your own application.
<source>

    private void startServer(String beanRes) throws FtpException {

        ApplicationContext appContext = 
           new FileSystemXmlApplicationContextEx (new String[] {beanRes});

        FtpServer svr = (FtpServer) appContext.getBean(
            BeanConstants.BEAN_SERVER);
        Thread svrThread = new Thread(svr);
        svrThread.start();
    }

</source>
		
		
        </subsection>
        
		</section>
	</body>
</document>
