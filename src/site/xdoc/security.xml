<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Hermes FTP Server Project</title>
		<author email="nospam.AT.larsbehnke.DOT.net">Lars Behnke</author>
	</properties>
	<meta
		name="keyword"
		content="ftp, java" />
	<body>
		<section name="Security">
		<subsection name="Keystore Usage">
			<p>
				<i>keytool</i> is a utility shipped with your Java SDK. It enables you to manage keys
				and certificates used for self-authentication or data integrity and authentication
				services. The security related data is stored in a so-called keystore, which is
				basically a file in your local file system. Besides your own private/public key
				pairs also public keys of your communication partners reside in this file. If you
				like to learn more about the keytool or keystore, please visit
				<a href="http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/keytool.html">this</a>
				site.
			</p>
			<p>
				Hermes FTP Server makes use of the keystore implementation provided by Sun
				Microsystems for negociating secure connections with FTP clients. If you wish to
				enable SSL security and send your own self-signed certificate to the client, change
				into the Hermes FTP installation folder and issue the following command from the
				command line.
			</p>
			On unix systems:
			<source>chmod 755 *.sh
./create_keystore.sh</source>
			<p>On windows systems:</p>
			<source>create_keystore.bat</source>
			<p>
				The utility asks for some personal data, which are included with the certificate.
				Finally, a file called
				<i>keystore</i>
				is created in the Hermes FTP home directory. Note that keystore and key share the
				same password "secret". The certificate is valid for 365 days.
			</p>
			<p>
				If you would like to have more control over the keystore and key parameters you can
				create the keystore manually:
			</p>
			<source>
keytool -genkey -alias hermes -keyalg DSA -keystore keystore -validity 365
				-storepass secret -keypass secret
			</source>
			<p>
				Of course, you can choose whatever parameters you like. However, 
				keystore password and key password have to be equal.
			</p>
			<p>
				Now that the keystore is set up, you may need to modify the configuration file
				<i>hermes-ctx.xml</i>
				. Find the following lines and change filename and password:
				<source>
... &lt;prop key="ssl.keystore.file"&gt;keystore&lt;/prop&gt;
    &lt;prop key="ssl.keystore.password"&gt;secret&lt;/prop&gt; ...
				</source>
			</p>
			<p>
				Please note that the created self-signed certificate is inappropriate in a
				production environment. If security is essential, you should apply to a certificate
				authority for a properly signed server certificate, and then import it into the
				keystore.
			</p>
	    </subsection>
	    <subsection name="FTPS Client Configuration">
	        <p>
	        	Any FTP client software that supports FTP over SSL/TLS (FTPS or FTPES) is required to establish a secure 
	        	connection to HermesFTP server. Don't mix FTPS up with SFTP. The latter one requires SSH and is currently
	        	<i>not</i> supported by HermesFTP.
	        </p>
	        <p>
	        	Here is a short guide how to set up a secure connection using 
	        	the Filezilla FTP client.  
	        	
	        	<br/>
	        	Let's start with setting up an implicit FTPS connection. 
	        	Implicit FTPS is an older, but still widely implemented, style in which 
	        	the client connects to a different control port, 
	        	and an SSL handshake is performed before any FTP commands are sent. 
	        	The entire FTPS session is encrypted. 
	        	Implicit FTPS does not allow for negotiation and the client should 
	        	immediately challenge the FTPS Server with the TLS/SSL handshake. 
	        	The Internet Assigned Numbers Authority (IANA) officially designates 
	        	port 990 as the FTPS control channel port and port 989 as the FTPS 
	        	data channel port. You can change the default port by setting
	        	the option <i>ssl.port.implicit</i>.
	        </p>
	        <p>	
	        	Open the server manager and create a new connection. Choose server name
	        	and ftps port the server listens to (e.g. 990 or 9900). The server type should be FTPS.
	            Enter user name and password and click connect.
	        </p>
	        	
	        <img alt="filezilla1" src="images/screenshots/ftps.png"/>
	        <p>When connecting the first time the client asks you to accept the server certificate.</p>
	        <img alt="filezilla2" src="images/screenshots/cert.png"/>
	        	
	        <p>The second way to establish a secure connection is explicit FTPS 
	        	(aka FTPES, aka AUTH TLS). This is the preferred method 
	        	according to RFC 4217. The client connects using plain text commands on port 21 
	        	and may negotiate a secure TLS connection during the FTP setup or at 
	        	any time thereafter by sending the AUTH command. 
	        </p>
	        <p>
	        	Again, open the server manager and create a new connection. Choose server name
	        	and ftp port the server listens to (e.g. 21 or 2121). The server type should be FTPES.
	            Enter user name and password and click connect.
	        </p>
	        <img alt="filezilla3" src="images/screenshots/ftpes.png"/>
	        <p>
	        	After connecting successfully the ftp client console 
	        	should show this sequence of commands:
	        </p>
	        <img alt="filezilla4" src="images/screenshots/ftpes-log.png"/>
	        	 
	    </subsection>
		</section>
	</body>
</document>
